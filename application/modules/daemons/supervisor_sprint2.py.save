import os
import json
import sqlite3
import datetime
import subprocess
from kafka import KafkaConsumer
from application import sqlite_string, db
from application.configfile import agentinfo_path, kafka_server_url
from application.common.loggerfile import my_logger
from application.models.models import TblAgentTaskStatus, TblWorkerAssignedTask

import time


def supervisoragent():
    print 'in supervisor'
    try:
        print 'in try'
        info = open(agentinfo_path, "r")
        content = info.read()
        data_req = json.loads(content, 'utf-8')
        agent_id = str(data_req['agent_id'])
        consumer = KafkaConsumer(bootstrap_servers=[kafka_server_url], group_id=agent_id)
        consumer.subscribe(pattern='task*')
        while True:
            for message in consumer:
	     try:
                consumer_data = message.value
                # print message
                # my_logger.debug(tasks_data)
                data = consumer_data.replace("'", '"')
                print type(data)
                print data,"this is before json................................"
                tasks_data = json.loads(data)
                print tasks_data,"this is all the data........................"

                if tasks_data['event_type'] == "tasks":
                    if agent_id == tasks_data['agent_id']:

           		my_logger.debug("agent_id verification done.....and this is true agent")
			
		        task_id_dict = tasks_data['task_id']
			task_id = str(task_id_dict)
                        path = tasks_data['worker_path']
                        payloadid = tasks_data['payload_id']

                        starttime = datetime.datetime.now()
			print "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                        task_status_insert_data = TblAgentTaskStatus(var_task_status='running',
                                                                     ts_execution_start_datetime=starttime,
                                                                     uid_task_id=task_id,
                                                                     bool_flag=0
                                                                     )
                        db.session.add(task_status_insert_data)
                        db.session.commit()
			my_logger.debug("running status is updated in task status and bool flag is set to false as this is new entry")

                        if payloadid == None:
			    my_logger.debug("there is no payload id that is y this block is being executed now")

                            pathlist = path.split("/")
                            pythonfile_name = pathlist[-1]
                            extension_name = pythonfile_name.split(".")

                            if extension_name[1] == 'py':
                                py_path = "'" + "python" + " " + path + "'"
				my_logger.debug("this is python file")
				my_logger.debug(py_path)
                                execute = os.system(py_path)
                            else:
                                sh_path = "sh" + " " + path
				my_logger.debug("this is shell script")
				my_logger.debug(sh_path)
                                execute = os.system(sh_path)
                                # Updates status if execution is completed
                            if execute == 0:
				my_logger.debug("execution success")
                                endtime = datetime.datetime.now()
                                update_task_status_query = db.session.query(TblAgentTaskStatus).filter(TblAgentTaskStatus.uid_task_id==task_id)
				print "22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"
                                update_task_status_query.update({"var_task_status":"completed",
                                                                             "bool_flag":0,
                                                                             "ts_finished_datetime":endtime})
				db.session.commit()
				print "33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"

                                worker_assigned_task_insert_statement = TblWorkerAssignedTask(TblAgentTaskStatus.uid_task_id==task_id)
                                db.session.add(worker_assigned_task_insert_statement)
                                db.session.commit()
                        # Assigning to worker if worker has arguments to be taken

                        else:

                            my_logger.debug("there is payload id that is y this block is being executed")
			    pathlist = path.split("/")
                            pythonfile_name = pathlist[-1]
                            name = pythonfile_name.split(".")
                            py_path = []
                            if name[1] == 'py':

                                py_path.append("python")
                                py_path.append(path)
                                py_path.append("payload_id")
                                py_path.append(payloadid)
				my_logger.debug("this is python file")
				my_logger.debug(py_path)
                                execute = subprocess.call(py_path, shell=False)
			    	my_logger.debug(execute)
			    	my_logger.debug("that is execuute output for python file")
                            else:
                                sh_path = []
                                sh_path.append(path)
                                sh_path.append("payload_id")
                                sh_path.append(payloadid)
				my_logger.debug(sh_path)
                                execute = subprocess.call(sh_path, shell=True)
			    print execute,"heloooooooooooooooooooooooooooooood"
                            if execute == 0:
                                endtime = datetime.datetime.now()
				print endtime
				print task_id,"tttttttttttttttttttttttttt"
				print task_id.strip(),"tttt"
				#print db.session.query(TblAgentTaskStatus.uid_task_id).filter(TblAgentTaskStatus.uid_task_id==task_id).all()

                                update_task_status_query = db.session.query(TblAgentTaskStatus).filter(TblAgentTaskStatus.uid_task_id==task_id).first()
				update_task=TblAgentTaskStatus.query.filter_by(uid_task_id=str(task_id)).first()
				print update_task_status_query,update_task
				update_task.var_task_status='completed'
				db.session.commit()
				#print update_task_status_query,type(update_task_status_query),"tjisssssssssssssssssssss"
				print "44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"
                                #update_task_status_query.update({"var_task_status":"completed"})
				#update_task_status_query.var_task_status='completed'
uid_task_id				#db.session.commit()
				print "5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555"

                                #worker_assigned_task_insert_statement = TblWorkerAssignedTask(TblAgentTaskStatus.uid_task_id==task_id)
                                #db.session.add(worker_assigned_task_insert_statement)
				print "666666666666666666666666666666666666666666666666666666666666666666"
      		                #db.session.commit()
	     except Exception as e:
		my_logger.error(e.message)
        time.sleep(2)

    except Exception as e:
	my_logger.error(e.message)
        print e.message
